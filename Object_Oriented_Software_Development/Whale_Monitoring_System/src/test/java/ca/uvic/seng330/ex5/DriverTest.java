/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package ca.uvic.seng330.ex5;

import org.json.JSONObject;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;


import static org.junit.jupiter.api.Assertions.*;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.net.MalformedURLException;
import java.util.*;


class DriverTest {

    WhaleMonitoringSystem testSystem;

    @BeforeEach public void setup() throws IOException {
        testSystem = new WhaleMonitoringSystem();

        Location locA = new Location(-123.3656, 48.4284);  //Victoria
        Location locB = new Location(-79.3832, 43.6532);   //Toronto
        Location locC = new Location(-43.1729, -22.9068);  //Rio
        Location locD = new Location(11.2558, 43.7696);    //Florence
        Location locE = new Location(8.6821, 50.1109);     //Frankfurt
        Location locF = new Location(116.4074, 39.9042);   //Beijing

        Date timeA = new Date(2020, Calendar.JANUARY, 1);
        Date timeB = new Date(2020, Calendar.JANUARY, 12);
        Date timeC = new Date(2020, Calendar.FEBRUARY, 3);
        Date timeD = new Date(2020, Calendar.MARCH, 1);
        Date timeE = new Date(2020, Calendar.MARCH, 7);

        testSystem.addReporter("Alice");
        testSystem.addWhale(Whale.Gender.MALE, Whale.Breed.BLUE, true, 200, 10);
        testSystem.addObservation(testSystem.getReporterCatalog().getReporter(0), testSystem.getWhaleCatalog().getWhale(0), locA, timeA);

        testSystem.addReporter("Bob");
        testSystem.addWhale(Whale.Gender.MALE, Whale.Breed.KILLER, true, 250, 12);
        testSystem.addObservation(testSystem.getReporterCatalog().getReporter(1), testSystem.getWhaleCatalog().getWhale(1), locB, timeB);
        testSystem.addWhale(Whale.Gender.MALE, Whale.Breed.BELUGA, true, 230, 12);
        testSystem.addObservation(testSystem.getReporterCatalog().getReporter(1), testSystem.getWhaleCatalog().getWhale(2), locC, timeB);

        testSystem.addReporter("Rose");
        testSystem.addWhale(Whale.Gender.FEMALE, Whale.Breed.KILLER, true, 200, 11);
        testSystem.addObservation(testSystem.getReporterCatalog().getReporter(2), testSystem.getWhaleCatalog().getWhale(3), locD, timeC);

        testSystem.addReporter("John");
        testSystem.addWhale(Whale.Gender.FEMALE, Whale.Breed.BELUGA, true, 210, 17);
        testSystem.addObservation(testSystem.getReporterCatalog().getReporter(3), testSystem.getWhaleCatalog().getWhale(4), locE, timeD);


        testSystem.addWhale(Whale.Gender.FEMALE, Whale.Breed.BLUE, true, 300, 25);
        testSystem.addObservation(testSystem.getReporterCatalog().getReporter(0), testSystem.getWhaleCatalog().getWhale(5), locF, timeE);
    }

    @Test public void testCompareWhaleByLength() {
        WhaleCatalog catalog = testSystem.getWhaleCatalog();
        catalog.sortByLength();

        for (int i = 0; i < 5; i++)
        {
            assertTrue(catalog.getWhale(i).getLength() <= catalog.getWhale(i + 1).getLength());
        }
    }

    @Test public void testCompareWhaleByWeight() {
        WhaleCatalog catalog = testSystem.getWhaleCatalog();
        catalog.sortByWeight();

        for (int i = 0; i < 5; i++)
        {
            assertTrue(catalog.getWhale(i).getWeight() <= catalog.getWhale(i + 1).getWeight());
        }
    }

    @Test public void testSortObservationByID() {
        ObservationCatalog catalog = testSystem.getObservationCatalog();
        catalog.sortById();

        for (int i = 0; i < 5; i++)
        {
            assertTrue(catalog.getObservation(i).getObservationId() <= catalog.getObservation(i + 1).getObservationId());
        }
    }

    @Test public void testSearchObservationByID() {
        ObservationCatalog catalog = testSystem.getObservationCatalog();

        assertEquals(catalog.searchById(0).get(), catalog.getObservation(0));
        assertEquals(catalog.searchById(1).get(), catalog.getObservation(1));
        assertEquals(catalog.searchById(2).get(), catalog.getObservation(2));
        assertEquals(catalog.searchById(3).get(), catalog.getObservation(3));
        assertEquals(catalog.searchById(4).get(), catalog.getObservation(4));
        assertEquals(catalog.searchById(5).get(), catalog.getObservation(5));
        assertTrue(catalog.searchById(999).isEmpty());

        ObservationCatalog empty = new ObservationCatalog();
        assertTrue(empty.searchById(0).isEmpty());
    }


    @Test public void testSortObservationByLocation() {
        ObservationCatalog catalog = testSystem.getObservationCatalog();
        catalog.sortByLocation();

        for (int i = 0; i < 5; i++)
        {
            double first = Math.max(catalog.getObservation(i).getLocation().getLatitude(), catalog.getObservation(i).getLocation().getLongitude());
            double second = Math.max(catalog.getObservation(i+1).getLocation().getLatitude(), catalog.getObservation(i+1).getLocation().getLongitude());
            assertTrue(first <= second);
        }
    }

    @Test public void testObservation_GetWeather() {
        ObservationCatalog catalog = testSystem.getObservationCatalog();
        catalog.sortByLocation();
        for (int i = 0; i < 5; i++) {
            double tempMin = catalog.getObservation(i).getWeather().getTempMin();
            double tempMax = catalog.getObservation(i).getWeather().getTempMax();
            assertTrue(tempMin <= tempMax);
        }
    }


    @Test public void testObservation_GetReporter() {
        ObservationCatalog catalog = testSystem.getObservationCatalog();
        catalog.sortById();
        String[] name = { "Alice", "Bob", "Rose", "John"};

        assertEquals(catalog.getObservation(0).getReporter().getName(), name[0]);
        assertEquals(catalog.getObservation(1).getReporter().getName(), name[1]);
        assertEquals(catalog.getObservation(3).getReporter().getName(), name[2]);
        assertEquals(catalog.getObservation(4).getReporter().getName(), name[3]);
    }

    @Test public void testObservation_Size() {
        ObservationCatalog catalog = testSystem.getObservationCatalog();
        assertTrue(catalog.size() >= 0);
    }

    @Test public void testWhale_SetWeight() {
        WhaleCatalog catalog = testSystem.getWhaleCatalog();
        for (int i = 0; i < 6; i++){
            catalog.getWhale(i).setWeight(200);
            assertEquals ( catalog.getWhale(i).getWeight(), 200);
        }
    }
    @Test public void testWhale_Gender() {
        WhaleCatalog catalog = testSystem.getWhaleCatalog();
        for (int i = 0; i < 6; i++){
            catalog.getWhale(i).setGender(Whale.Gender.MALE);
            assertEquals ( catalog.getWhale(i).getGender(), Whale.Gender.MALE);
        }
    }
    @Test public void testWhale_Alive() {
        WhaleCatalog catalog = testSystem.getWhaleCatalog();
        for (int i = 0; i < 6; i++){
            assertTrue(catalog.getWhale(i).getAlive());
            catalog.getWhale(i).setAlive(false);
            assertFalse ( catalog.getWhale(i).getAlive());
        }
    }
    @Test public void testWhale_Length() {
        WhaleCatalog catalog = testSystem.getWhaleCatalog();
        for (int i = 0; i < 6; i++){
            catalog.getWhale(i).setLength(500);
        assertEquals ( catalog.getWhale(i).getLength(), 500);
        }
    }

    @Test public void testWhale_GetId() {
        WhaleCatalog catalog = testSystem.getWhaleCatalog();

        assertEquals (catalog.getWhale(0).getId(), 0);
        assertEquals (catalog.getWhale(1).getId(), 1);
        assertEquals (catalog.getWhale(2).getId(), 2);
        assertEquals (catalog.getWhale(3).getId(), 3);
        assertEquals (catalog.getWhale(4).getId(), 4);
        assertEquals (catalog.getWhale(5).getId(), 5);
    }

    @Test public void testWhale_GetBreed() {
        WhaleCatalog catalog = testSystem.getWhaleCatalog();

        assertEquals (catalog.getWhale(0).getBreed(), Whale.Breed.BLUE);
        assertEquals (catalog.getWhale(1).getBreed(), Whale.Breed.KILLER);
        assertEquals (catalog.getWhale(2).getBreed(), Whale.Breed.BELUGA);
        assertEquals (catalog.getWhale(3).getBreed(), Whale.Breed.KILLER);
        assertEquals (catalog.getWhale(4).getBreed(), Whale.Breed.BELUGA);
        assertEquals (catalog.getWhale(5).getBreed(), Whale.Breed.BLUE);
    }

    @Test public void testReporter_GetId () {
        ReporterCatalog catalog = testSystem.getReporterCatalog();

        assertEquals(catalog.getReporter(0).getId(), 0);
        assertEquals(catalog.getReporter(1).getId(), 1);
        assertEquals(catalog.getReporter(2).getId(), 2);
        assertEquals(catalog.getReporter(3).getId(), 3);
    }


    @Test public void testSearchByLocation() throws IOException {
        ObservationCatalog catalog = testSystem.getObservationCatalog();
        WhaleCatalog whales = testSystem.getWhaleCatalog();

        assertEquals(catalog.searchByLocation(-123.3656, 48.4284).get().getWhale(), whales.getWhale(0));
        assertEquals(catalog.searchByLocation(-79.3832, 43.6532).get().getWhale(), whales.getWhale(1));
        assertEquals(catalog.searchByLocation(-43.1729, -22.9068).get().getWhale(), whales.getWhale(2));
        assertEquals(catalog.searchByLocation(11.2558, 43.7696).get().getWhale(), whales.getWhale(3));
        assertEquals(catalog.searchByLocation(8.6821, 50.1109).get().getWhale(), whales.getWhale(4));
        assertEquals(catalog.searchByLocation(116.4074, 39.9042).get().getWhale(), whales.getWhale(5));
        assertTrue(catalog.searchByLocation(17.588179, -139.160138).isEmpty());

        ObservationCatalog empty = new ObservationCatalog();
        assertTrue(empty.searchByLocation(53.609892, -155.097642).isEmpty());
    }

    @Test public void testSortByWeight() {
        WhaleCatalog catalog = testSystem.getWhaleCatalog();
        catalog.sortByWeight();

        assertEquals(catalog.getWhale(0).getWeight(),200);
        assertEquals(catalog.getWhale(1).getWeight(),200);
        assertEquals(catalog.getWhale(2).getWeight(),210);
        assertEquals(catalog.getWhale(3).getWeight(),230);
        assertEquals(catalog.getWhale(4).getWeight(),250);
        assertEquals(catalog.getWhale(5).getWeight(),300);
    }

    @Test public void testSortByLength() {
        WhaleCatalog catalog = testSystem.getWhaleCatalog();
        catalog.sortByLength();

        assertEquals(catalog.getWhale(0).getLength(),10);
        assertEquals(catalog.getWhale(1).getLength(),11);
        assertEquals(catalog.getWhale(2).getLength(),12);
        assertEquals(catalog.getWhale(3).getLength(),12);
        assertEquals(catalog.getWhale(4).getLength(),17);
        assertEquals(catalog.getWhale(5).getLength(),25);

    }


    @Test public void testIllegalWhale() {

        assertThrows(NullPointerException.class, () -> {testSystem.addWhale(null, Whale.Breed.BLUE, true, 300, 25);});
        assertThrows(NullPointerException.class, () -> {testSystem.addWhale(Whale.Gender.FEMALE, null, true, 300, 25);});
        assertThrows(NullPointerException.class, () -> {testSystem.addWhale(Whale.Gender.FEMALE, Whale.Breed.BLUE, null, 300, 25);});
        assertThrows(NumberFormatException.class, () -> {testSystem.addWhale(Whale.Gender.FEMALE, Whale.Breed.BLUE, true, -1, 25);});
        assertThrows(NumberFormatException.class, () -> {testSystem.addWhale(Whale.Gender.FEMALE, Whale.Breed.BLUE, true, 300, -1);});
    }

    @Test public void testIllegalReporter(){
        assertThrows(NullPointerException.class, () -> {testSystem.addReporter(null);});
    }

    @Test
    public void testGetReporterCatalog() throws ClassNotFoundException, NoSuchFieldException {
        try {
            // change field visibility
            String fulluQulifiedName = "ca.uvic.seng330.ex5.ReporterCatalog";
            Class<ReporterCatalog> ReporterCatalogClass =(Class<ReporterCatalog>) Class.forName(fulluQulifiedName);

            Field field = ReporterCatalogClass.getDeclaredField("reporters");
            field.setAccessible(true);

            // change method visibility
            Method method = ReporterCatalog.class.getDeclaredMethod("getReporterCatalog");
            method.setAccessible(true);

            //Make sure geReporterCatalog is returning the reporter list
            assertEquals(field.get(testSystem.getReporterCatalog()), method.invoke(testSystem.getReporterCatalog()));

        }catch(NoSuchMethodException | IllegalAccessException | InvocationTargetException e){
            e.printStackTrace();
        }
    }

    @Test
    public void testGetIdReporterCatalog() throws ClassNotFoundException {
        try {
            Method method2 = ReporterCatalog.class.getDeclaredMethod("getId");
            method2.setAccessible(true);

            //Check that the last reporter id is the same as the size of the reporter list
            assertEquals(testSystem.getReporterCatalog().size(), method2.invoke(testSystem.getReporterCatalog()));

        } catch(NoSuchMethodException | IllegalAccessException | InvocationTargetException e2)
        {
            e2.printStackTrace();
        }
    }

    @Test
    public void testGetObservationCatalog() throws ClassNotFoundException, NoSuchFieldException {
        try {
            // change field visibility
            String fulluQulifiedName = "ca.uvic.seng330.ex5.ObservationCatalog";
            Class<ObservationCatalog> ObservationCatalogClass =(Class<ObservationCatalog>) Class.forName(fulluQulifiedName);

            Field field = ObservationCatalogClass.getDeclaredField("observations");
            field.setAccessible(true);

            // change method visibility
            Method method = ObservationCatalog.class.getDeclaredMethod("getObservationCatalog");
            method.setAccessible(true);

            //Make sure getObservationCatalog is returning the observation list
            assertEquals(field.get(testSystem.getObservationCatalog()), method.invoke(testSystem.getObservationCatalog()));

        } catch(NoSuchMethodException | IllegalAccessException | InvocationTargetException e){
            e.printStackTrace();
        }
    }

    @Test
    public void testGetIdObservationCatalog() throws ClassNotFoundException {
        try {
            Method method2 = ObservationCatalog.class.getDeclaredMethod("getId");
            method2.setAccessible(true);

            //Check that the last observation id is the same as the size of the observation list
            assertEquals(testSystem.getObservationCatalog().size(), method2.invoke(testSystem.getObservationCatalog()));

        } catch(NoSuchMethodException | IllegalAccessException | InvocationTargetException e2)
        {
            e2.printStackTrace();
        }
    }

    @Test
    public void testGetWhaleCatalog() throws ClassNotFoundException, NoSuchFieldException {
        try {
            // change field visibility
            String fulluQulifiedName = "ca.uvic.seng330.ex5.WhaleCatalog";
            Class<WhaleCatalog> WhaleCatalogClass =(Class<WhaleCatalog>) Class.forName(fulluQulifiedName);

            Field field = WhaleCatalogClass.getDeclaredField("whales");
            field.setAccessible(true);

            // change method visibility
            Method method = WhaleCatalog.class.getDeclaredMethod("getWhaleCatalog");
            method.setAccessible(true);

            //Make sure getWhaleCatalog is returning the whale list
            assertEquals(field.get(testSystem.getWhaleCatalog()), method.invoke(testSystem.getWhaleCatalog()));

        } catch(NoSuchMethodException | IllegalAccessException | InvocationTargetException e){
            e.printStackTrace();
        }
    }

    @Test
    public void testGetIdWhaleCatalog() throws ClassNotFoundException {
        try {
            Method method2 = WhaleCatalog.class.getDeclaredMethod("getId");
            method2.setAccessible(true);

            //Check that the last whale id is the same as the size of the whale list
            assertEquals(testSystem.getWhaleCatalog().size(), method2.invoke(testSystem.getWhaleCatalog()));

        } catch(NoSuchMethodException | IllegalAccessException | InvocationTargetException e2)
        {
            e2.printStackTrace();
        }
    }

    @Test
    public void testWeather() throws IOException {
        API api = new MockAPI();
        APIFactory.setInstance(api);
        Location l = new Location(70, 70);
        Weather w = new Weather(l);
        Assertions.assertEquals(w.getTempMin(), -22.8);
        Assertions.assertEquals(w.getTempMax(), -15.7);
        Assertions.assertEquals(w.getVisibility(), 10000);

    }

}

